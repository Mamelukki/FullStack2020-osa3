{"version":3,"sources":["components/PersonForm.js","components/Filter.js","components/Person.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","addPerson","newName","handlePersonChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Filter","showFiltered","handleFilterChange","Person","person","removePerson","name","number","id","onClick","Notification","message","includes","className","baseUrl","axios","get","then","response","data","newObject","post","delete","put","App","useState","persons","setPersons","setNewName","setNewNumber","setShowFiltered","setMessage","useEffect","personService","initialPersons","personsToShow","filter","toLowerCase","event","target","console","log","preventDefault","personObject","length","returnedPerson","concat","setTimeout","window","confirm","find","p","changedPerson","map","catch","error","i","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a297051.chunk.js","sourcesContent":["import React from 'react'\n\nconst PersonForm = ({addPerson, newName, handlePersonChange, newNumber, handleNumberChange}) => {\n    return (\n      <form onSubmit={addPerson}>\n        <div>\n          name: \n          <input \n            value={newName}\n            onChange={handlePersonChange}\n          />\n        </div>\n        <div>\n        <div>\n          number: \n          <input \n            value={newNumber}\n            onChange={handleNumberChange}\n          />\n        </div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Filter = ({showFiltered, handleFilterChange}) => {\n  return (\n    <div>        \n      filter shown with: \n      <input \n      value={showFiltered}\n      onChange={handleFilterChange}\n      />\n    </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst Person = ({ person, removePerson }) => {\n  return (\n      <p> {person.name} {person.number} <button id={person.id} onClick={removePerson}>delete</button></p>\n    )\n}\n\nexport default Person","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  if (message.includes('removed')) {\n    return ( \n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"success\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = id => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport Person from './components/Person'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ showFiltered, setShowFiltered ] = useState('')\n  const [ message, setMessage ] = useState(null)\n \n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const handlePersonChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setShowFiltered(event.target.value)\n    console.log(showFiltered.toLowerCase())\n  } \n\n  const removePerson = id => {\n    const person = persons.find(p => p.id === id)\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService\n        .remove(id)\n          .then(response => {\n          setPersons(persons.filter(person => person.id !== id))\n        })\n        setMessage(`Deleted ${person.name} from the phonebook`)\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n    }\n  }\n\n  const personsToShow = persons.filter(person => person.name.toLowerCase().includes(showFiltered.toLowerCase()))\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    \n    // filter the array based on the wanted name\n    // if the name is not found from the array, the list length is 0\n    const filteredPersons = persons.filter(person => person.name.toLowerCase() === personObject.name.toLowerCase())\n\n    if (filteredPersons.length === 0) {\n      personService\n        .create(personObject)\n          .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n        })\n        setMessage(`Added ${newName} into the phonebook`)\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n    } else {\n      if (window.confirm(`${personObject.name} is already added to phonebook, replace the old number with a new one?`)) {\n        const person = persons.find(p => p.name === newName)\n        const changedPerson = { ...person, number: newNumber }\n\n        personService\n          .update(person.id, changedPerson)\n            .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== returnedPerson.id ? person : returnedPerson))\n          })\n          .catch(error => {\n            setMessage(`Information of ${person.name} has already been removed from the server`)\n          })\n        setMessage(`Changed the number of ${newName} to ${newNumber}`)\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n      }\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter showFiltered={showFiltered} handleFilterChange={handleFilterChange} />\n      <h2>Add a new</h2>\n      <PersonForm addPerson={addPerson} newName={newName} handlePersonChange={handlePersonChange} newNumber={newNumber} handleNumberChange={handleNumberChange} />\n      <h2>Numbers</h2>\n      {personsToShow.map((person, i) => \n        <Person key={i} person={person} removePerson={() => removePerson(person.id)} />)\n      }\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}