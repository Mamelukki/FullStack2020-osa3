{"version":3,"sources":["components/PersonForm.js","components/Filter.js","components/Person.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","addPerson","newName","handlePersonChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Filter","showFiltered","handleFilterChange","Person","person","removePerson","name","number","id","onClick","Notification","message","className","baseUrl","axios","get","then","response","data","newObject","post","delete","put","App","useState","persons","setPersons","setNewName","setNewNumber","setShowFiltered","setMessage","messageType","setMessageType","useEffect","personService","initialPersons","personsToShow","filter","toLowerCase","includes","event","target","console","log","preventDefault","personObject","length","returnedPerson","concat","setTimeout","catch","error","window","confirm","find","p","changedPerson","map","i","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79a8385a.chunk.js","sourcesContent":["import React from 'react'\n\nconst PersonForm = ({addPerson, newName, handlePersonChange, newNumber, handleNumberChange}) => {\n    return (\n      <form onSubmit={addPerson}>\n        <div>\n          name: \n          <input \n            value={newName}\n            onChange={handlePersonChange}\n          />\n        </div>\n        <div>\n        <div>\n          number: \n          <input \n            value={newNumber}\n            onChange={handleNumberChange}\n          />\n        </div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Filter = ({showFiltered, handleFilterChange}) => {\n  return (\n    <div>        \n      filter shown with: \n      <input \n      value={showFiltered}\n      onChange={handleFilterChange}\n      />\n    </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst Person = ({ person, removePerson }) => {\n  return (\n      <p> {person.name} {person.number} <button id={person.id} onClick={removePerson}>delete</button></p>\n    )\n}\n\nexport default Person","import React from 'react'\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null\n  }\n\n  if (type === 'error') {\n    return ( \n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"success\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = id => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport Person from './components/Person'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ showFiltered, setShowFiltered ] = useState('')\n  const [ message, setMessage ] = useState(null)\n  const [ messageType, setMessageType ] = useState(null)\n \n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const handlePersonChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setShowFiltered(event.target.value)\n    console.log(showFiltered.toLowerCase())\n  } \n\n  const removePerson = id => {\n    const person = persons.find(p => p.id === id)\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService\n        .remove(id)\n          .then(response => {\n          setPersons(persons.filter(person => person.id !== id))\n        })\n        setMessage(`Deleted ${person.name} from the phonebook`)\n        setMessageType('success')\n        setTimeout(() => {\n          setMessage(null)\n          setMessageType(null)\n        }, 5000)\n    }\n  }\n\n  const personsToShow = persons.filter(person => person.name.toLowerCase().includes(showFiltered.toLowerCase()))\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    \n    // filter the array based on the wanted name\n    // if the name is not found from the array, the list length is 0\n    const filteredPersons = persons.filter(person => person.name.toLowerCase() === personObject.name.toLowerCase())\n\n    if (filteredPersons.length === 0) {\n      personService\n        .create(personObject)\n          .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n\n          setMessage(`Added ${newName} into the phonebook`)\n          setMessageType('success')\n          setTimeout(() => {\n            setMessage(null)\n            setMessageType(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setMessage(error.response.data.error)\n          setMessageType('error')\n          setTimeout(() => {\n            setMessage(null)\n            setMessageType(null)\n          }, 5000)\n        })\n    } else {\n      if (window.confirm(`${personObject.name} is already added to phonebook, replace the old number with a new one?`)) {\n        const person = persons.find(p => p.name === newName)\n        const changedPerson = { ...person, number: newNumber }\n\n        personService\n          .update(person.id, changedPerson)\n            .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== returnedPerson.id ? person : returnedPerson))\n            \n            setMessage(`Changed the number of ${newName} to ${newNumber}`)\n            setMessageType('success')\n            setTimeout(() => {\n              setMessage(null)\n              setMessageType(null)\n            }, 5000)\n          })\n          .catch(error => {\n            setMessage(`Information of ${person.name} has already been removed from the server`)\n            setMessageType('error')\n            setTimeout(() => {\n              setMessage(null)\n              setMessageType(null)\n            }, 5000)\n          })\n      }\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} type={messageType}/>\n      <Filter showFiltered={showFiltered} handleFilterChange={handleFilterChange} />\n      <h2>Add a new</h2>\n      <PersonForm addPerson={addPerson} newName={newName} handlePersonChange={handlePersonChange} newNumber={newNumber} handleNumberChange={handleNumberChange} />\n      <h2>Numbers</h2>\n      {personsToShow.map((person, i) => \n        <Person key={i} person={person} removePerson={() => removePerson(person.id)} />)\n      }\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}